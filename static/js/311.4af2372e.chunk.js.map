{"version":3,"file":"static/js/311.4af2372e.chunk.js","mappings":"6OAsBMA,EAAe,CACnBC,KAAM,GACNC,MAAO,GACPC,SAAU,IAGCC,EAAe,WAC1B,IAAAC,GAAgCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAxCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GACtBI,GAAWC,EAAAA,EAAAA,MAOjB,OACEC,EAAAA,EAAAA,MAACC,EAAAA,GAAW,CAAAC,SAAA,EACVC,EAAAA,EAAAA,KAACC,EAAAA,GAAc,KACfD,EAAAA,EAAAA,KAACE,EAAAA,GAAM,CACLC,cAAenB,EACfoB,iBAAkBC,EAAAA,EAClBC,SAZe,SAACC,EAAKC,GAAqB,IAAjBC,EAASD,EAATC,UAC7Bd,EAASe,EAAAA,GAAAA,SAAoBH,IAC7Bb,GAAY,GACZe,GACF,EASME,iBAAkBlB,EAClBmB,gBAAgB,EAAMb,SAErB,SAAAc,GAAA,IAAGC,EAAMD,EAANC,OAAQC,EAAOF,EAAPE,QAAO,OACjBlB,EAAAA,EAAAA,MAACmB,EAAAA,GAAU,CAACC,YAAU,EAAAlB,SAAA,EACpBC,EAAAA,EAAAA,KAACkB,EAAAA,GAAS,CAAAnB,SAAC,kBACXF,EAAAA,EAAAA,MAACsB,EAAAA,GAAa,CAAApB,SAAA,EACZF,EAAAA,EAAAA,MAACuB,EAAAA,GAAW,CAACC,QAAQ,OAAMtB,SAAA,EACzBC,EAAAA,EAAAA,KAACsB,EAAAA,GAAW,CACVC,KAAK,OACLtC,KAAK,OACLuC,MAAM,8DACNC,UAAQ,EACRC,QAAQ,kIACRC,YAAY,UAEd3B,EAAAA,EAAAA,KAAC4B,EAAAA,GAAQ,KACT5B,EAAAA,EAAAA,KAAC6B,EAAAA,GAAY,CAAC5C,KAAK,SAClB8B,EAAQ9B,OAAS6B,EAAO7B,MAAQQ,IAAYO,EAAAA,EAAAA,KAAC8B,EAAAA,EAAY,QAE5DjC,EAAAA,EAAAA,MAACuB,EAAAA,GAAW,CAACC,QAAQ,QAAOtB,SAAA,EAC1BC,EAAAA,EAAAA,KAACsB,EAAAA,GAAW,CACVC,KAAK,QACLtC,KAAK,QACL0C,YAAY,QACZF,UAAQ,KAEVzB,EAAAA,EAAAA,KAAC+B,EAAAA,GAAS,KACV/B,EAAAA,EAAAA,KAAC6B,EAAAA,GAAY,CAAC5C,KAAK,UAClB8B,EAAQ7B,QAAU4B,EAAO5B,OAASO,IAAYO,EAAAA,EAAAA,KAAC8B,EAAAA,EAAY,QAE9DjC,EAAAA,EAAAA,MAACuB,EAAAA,GAAW,CAACC,QAAQ,WAAUtB,SAAA,EAC7BC,EAAAA,EAAAA,KAACsB,EAAAA,GAAW,CACVC,KAAK,WACLtC,KAAK,WACL0C,YAAY,WACZF,UAAQ,KAEVzB,EAAAA,EAAAA,KAACgC,EAAAA,GAAY,KACbhC,EAAAA,EAAAA,KAAC6B,EAAAA,GAAY,CAAC5C,KAAK,aAClB8B,EAAQ5B,WAAa2B,EAAO3B,UAAYM,IACvCO,EAAAA,EAAAA,KAAC8B,EAAAA,EAAY,CAAA/B,SAAC,8BAKpBC,EAAAA,EAAAA,KAACiC,EAAAA,GAAS,CAACV,KAAK,SAASW,QAAS,kBAAMxC,GAAY,EAAK,EAACK,SAAC,cAGhD,KAIjBC,EAAAA,EAAAA,KAACmC,EAAAA,GAAU,CAACC,GAAI,UAAUrC,SAAC,cAGjC,ECtFA,EAViB,WACf,OACEC,EAAAA,EAAAA,KAACqC,EAAAA,GAAgB,CAAAtC,UACfC,EAAAA,EAAAA,KAACsC,EAAAA,GAAuB,CAAAvC,UACtBC,EAAAA,EAAAA,KAACZ,EAAY,OAIrB,C","sources":["components/RegisterPageComponents/RegisterForm.jsx","pages/Register/Register.jsx"],"sourcesContent":["import { useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\n\nimport { Formik, ErrorMessage } from 'formik';\nimport { signupSchema, ValidMessage } from './validationRegister';\nimport {\n  FormWrapper,\n  FormStyled,\n  LabelStyled,\n  FieldStyled,\n  FormTitle,\n  FieldsWrapper,\n  UserIcon,\n  EmailIcon,\n  PasswordIcon,\n  SubmitBtn,\n  LinkStyled,\n} from './RegisterForm.styled';\nimport operations from 'redux/auth/authOperations';\nimport { BgOrderFoodImg } from '../../pages/Register/Register.styled';\n\nconst initialValue = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nexport const RegisterForm = () => {\n  const [isSubmit, setIsSubmit] = useState(false);\n  const dispatch = useDispatch();\n  const handleSubmit = (value, { resetForm }) => {\n    dispatch(operations.register(value));\n    setIsSubmit(false);\n    resetForm();\n  };\n\n  return (\n    <FormWrapper>\n      <BgOrderFoodImg></BgOrderFoodImg>\n      <Formik\n        initialValues={initialValue}\n        validationSchema={signupSchema}\n        onSubmit={handleSubmit}\n        validateOnChange={isSubmit}\n        validateOnBlur={false}\n      >\n        {({ errors, touched }) => (\n          <FormStyled noValidate>\n            <FormTitle>Registration</FormTitle>\n            <FieldsWrapper>\n              <LabelStyled htmlFor=\"name\">\n                <FieldStyled\n                  type=\"text\"\n                  name=\"name\"\n                  title=\"Name may contain only letters, apostrophe, dash and spaces.\"\n                  required\n                  pattern=\"^[a-zA-Z0-9а-яА-Я]+(([' -][a-zA-Z0-9а-яА-Я ])?[a-zA-Z0-9а-яА-Я]*)*$\"\n                  placeholder=\"Name\"\n                />\n                <UserIcon />\n                <ErrorMessage name=\"name\" />\n                {touched.name && !errors.name && isSubmit && <ValidMessage />}\n              </LabelStyled>\n              <LabelStyled htmlFor=\"email\">\n                <FieldStyled\n                  type=\"email\"\n                  name=\"email\"\n                  placeholder=\"Email\"\n                  required\n                />\n                <EmailIcon />\n                <ErrorMessage name=\"email\" />\n                {touched.email && !errors.email && isSubmit && <ValidMessage />}\n              </LabelStyled>\n              <LabelStyled htmlFor=\"password\">\n                <FieldStyled\n                  type=\"password\"\n                  name=\"password\"\n                  placeholder=\"Password\"\n                  required\n                />\n                <PasswordIcon />\n                <ErrorMessage name=\"password\" />\n                {touched.password && !errors.password && isSubmit && (\n                  <ValidMessage>Password is secure</ValidMessage>\n                )}\n              </LabelStyled>\n            </FieldsWrapper>\n\n            <SubmitBtn type=\"submit\" onClick={() => setIsSubmit(true)}>\n              Sign up\n            </SubmitBtn>\n          </FormStyled>\n        )}\n      </Formik>\n\n      <LinkStyled to={'/signin'}>Sign in</LinkStyled>\n    </FormWrapper>\n  );\n};\n","import { AuthPagesSection, ContainerAuthPageStyled } from './Register.styled';\n\nimport { RegisterForm } from 'components/RegisterPageComponents/RegisterForm';\n\nconst Register = () => {\n  return (\n    <AuthPagesSection>\n      <ContainerAuthPageStyled>\n        <RegisterForm />\n      </ContainerAuthPageStyled>\n    </AuthPagesSection>\n  );\n};\n\nexport default Register;\n"],"names":["initialValue","name","email","password","RegisterForm","_useState","useState","_useState2","_slicedToArray","isSubmit","setIsSubmit","dispatch","useDispatch","_jsxs","FormWrapper","children","_jsx","BgOrderFoodImg","Formik","initialValues","validationSchema","signupSchema","onSubmit","value","_ref","resetForm","operations","validateOnChange","validateOnBlur","_ref2","errors","touched","FormStyled","noValidate","FormTitle","FieldsWrapper","LabelStyled","htmlFor","FieldStyled","type","title","required","pattern","placeholder","UserIcon","ErrorMessage","ValidMessage","EmailIcon","PasswordIcon","SubmitBtn","onClick","LinkStyled","to","AuthPagesSection","ContainerAuthPageStyled"],"sourceRoot":""}