{"version":3,"file":"static/js/905.303e4ce0.chunk.js","mappings":"6OASMA,EAAe,SAAAC,GACnB,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOC,UACpBF,EAAAA,EAAAA,KAAA,QAAAE,SAAOH,KAGb,EAEaI,EAAe,SAAHC,GAAsB,IAAhBF,EAAQE,EAARF,SAC7B,OACEF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOC,UACpBF,EAAAA,EAAAA,KAAA,QAAAE,SAAOA,KAGb,EAEaG,EAAeC,EAAAA,KAAaC,MAAM,CAC7CC,KAAMF,EAAAA,KACHG,IAAI,EAAGX,EAAa,sBACpBY,IAAI,GAAIZ,EAAa,qBACrBa,QA1BH,8KA0BsB,CAClBC,QAASd,EAAa,gBACtBe,oBAAoB,IAErBC,SAAShB,EAAa,2BACzBiB,MAAOT,EAAAA,KACJS,MAAMjB,EAAa,yBACnBa,QA/BH,qJA+BuB,CACnBC,QAASd,EAAa,wBACtBe,oBAAoB,IAErBC,SAAShB,EAAa,2BAEzBkB,SAAUV,EAAAA,KACPG,IAAI,EAAGX,EAAa,uBACpBY,IAAI,GAAIZ,EAAa,yBACrBa,QAtCiB,0CAsCM,CACtBC,QAASd,EAAa,yBACtBe,oBAAoB,IAErBC,SAAShB,EAAa,6B,UCxCrBmB,EAAe,CACnBT,KAAM,GACNO,MAAO,GACPC,SAAU,IAGCE,EAAa,WACxB,IAAAC,GAAgCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAxCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GACtBI,GAAWC,EAAAA,EAAAA,MAOjB,OACEC,EAAAA,EAAAA,MAAA,OAAAzB,SAAA,EACEF,EAAAA,EAAAA,KAAC4B,EAAAA,GAAM,CACLC,cAAeZ,EACfa,iBAAkBzB,EAClB0B,SAXe,SAACC,EAAK5B,GAAqB,IAAjB6B,EAAS7B,EAAT6B,UAC7BR,EAASS,EAAAA,EAAAA,MAAiBF,IAC1BR,GAAY,GACZS,GACF,EAQME,iBAAkBZ,EAClBa,gBAAgB,EAAMlC,SAErB,SAAAmC,GAAA,IAAGC,EAAMD,EAANC,OAAQC,EAAOF,EAAPE,QAAO,OACjBZ,EAAAA,EAAAA,MAACa,EAAAA,GAAI,CAACC,YAAU,EAAAvC,SAAA,EACdF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,aACJyB,EAAAA,EAAAA,MAAA,OAAAzB,SAAA,EACEyB,EAAAA,EAAAA,MAAA,SAAOe,QAAQ,OAAMxC,SAAA,EACnBF,EAAAA,EAAAA,KAAC2C,EAAAA,GAAK,CACJC,KAAK,OACLpC,KAAK,OACLqC,MAAM,8DACN/B,UAAQ,EACRgC,QAAQ,kIACRC,YAAY,UAEd/C,EAAAA,EAAAA,KAACgD,EAAAA,IAAM,KACPhD,EAAAA,EAAAA,KAACiD,EAAAA,GAAY,CAACzC,KAAK,SAClB+B,EAAQ/B,OAAS8B,EAAO9B,MAAQe,IAAYvB,EAAAA,EAAAA,KAACG,EAAY,QAE5DwB,EAAAA,EAAAA,MAAA,SAAOe,QAAQ,QAAOxC,SAAA,EACpBF,EAAAA,EAAAA,KAAC2C,EAAAA,GAAK,CAACC,KAAK,QAAQpC,KAAK,QAAQuC,YAAY,QAAQjC,UAAQ,KAC7Dd,EAAAA,EAAAA,KAACkD,EAAAA,IAAa,KACdlD,EAAAA,EAAAA,KAACiD,EAAAA,GAAY,CAACzC,KAAK,UAClB+B,EAAQxB,QAAUuB,EAAOvB,OAASQ,IAAYvB,EAAAA,EAAAA,KAACG,EAAY,QAE9DwB,EAAAA,EAAAA,MAAA,SAAOe,QAAQ,WAAUxC,SAAA,EACvBF,EAAAA,EAAAA,KAAC2C,EAAAA,GAAK,CACJC,KAAK,WACLpC,KAAK,WACLuC,YAAY,WACZjC,UAAQ,KAEVd,EAAAA,EAAAA,KAACmD,EAAAA,IAAM,KACPnD,EAAAA,EAAAA,KAACiD,EAAAA,GAAY,CAACzC,KAAK,aAClB+B,EAAQvB,WAAasB,EAAOtB,UAAYO,IACvCvB,EAAAA,EAAAA,KAACG,EAAY,CAAAD,SAAC,8BAKpBF,EAAAA,EAAAA,KAAA,UAAQ4C,KAAK,SAASQ,QAAS,kBAAM5B,GAAY,EAAK,EAACtB,SAAC,cAGnD,KAIXF,EAAAA,EAAAA,KAACqD,EAAAA,GAAI,CAACC,GAAI,QAAQpD,SAAC,mBAGzB,ECrEA,EAVe,WACb,OACEF,EAAAA,EAAAA,KAAA,WAAAE,UACEF,EAAAA,EAAAA,KAAA,OAAAE,UACEF,EAAAA,EAAAA,KAACkB,EAAU,OAInB,C","sources":["components/SigninPageComponents/validationSignin.js","components/SigninPageComponents/SigninForm.jsx","pages/Signin/SigninPage.jsx"],"sourcesContent":["import * as Yup from 'yup';\n\nconst nameRules =\n  /^[a-zA-Z0-9а-яА-Я]+((['-](?=[a-zA-Z0-9а-яА-Я])|(?=[a-zA-Z0-9а-яА-Я]))?[a-zA-Z0-9а-яА-Я]*)*$/;\nconst emailRules =\n  /^(([^<>()\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nconst passwordRules = /^(?=.*\\d)(?=.*[a-z])[a-zA-Z0-9]{6,255}$/;\n\nconst errorMessage = msg => {\n  return (\n    <div className=\"error\">\n      <span>{msg}</span>\n    </div>\n  );\n};\n\nexport const ValidMessage = ({ children }) => {\n  return (\n    <div className=\"valid\">\n      <span>{children}</span>\n    </div>\n  );\n};\n\nexport const signinSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(1, errorMessage('Name is too short'))\n    .max(16, errorMessage('Name is too long'))\n    .matches(nameRules, {\n      message: errorMessage('Invalid name'),\n      excludeEmptyString: true,\n    })\n    .required(errorMessage('This field is required')),\n  email: Yup.string()\n    .email(errorMessage('Invalid email format'))\n    .matches(emailRules, {\n      message: errorMessage('Invalid email format'),\n      excludeEmptyString: true,\n    })\n    .required(errorMessage('This field is required')),\n\n  password: Yup.string()\n    .min(6, errorMessage('Password too short'))\n    .max(16, errorMessage('Password is too long'))\n    .matches(passwordRules, {\n      message: errorMessage('Password is not valid'),\n      excludeEmptyString: true,\n    })\n    .required(errorMessage('This field is required')),\n});\n","import { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { FiUser, FiLock } from 'react-icons/fi';\nimport { HiOutlineMail } from 'react-icons/hi';\nimport { Formik, ErrorMessage, Form, Field } from 'formik';\nimport { signinSchema, ValidMessage } from './validationSignin';\nimport operations from 'redux/auth/authOperations';\n\nconst initialValue = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nexport const SigninForm = () => {\n  const [isSubmit, setIsSubmit] = useState(false);\n  const dispatch = useDispatch();\n  const handleSubmit = (value, { resetForm }) => {\n    dispatch(operations.logIn(value));\n    setIsSubmit(false);\n    resetForm();\n  };\n\n  return (\n    <div>\n      <Formik\n        initialValues={initialValue}\n        validationSchema={signinSchema}\n        onSubmit={handleSubmit}\n        validateOnChange={isSubmit}\n        validateOnBlur={false}\n      >\n        {({ errors, touched }) => (\n          <Form noValidate>\n            <h1>Sign In</h1>\n            <div>\n              <label htmlFor=\"name\">\n                <Field\n                  type=\"text\"\n                  name=\"name\"\n                  title=\"Name may contain only letters, apostrophe, dash and spaces.\"\n                  required\n                  pattern=\"^[a-zA-Z0-9а-яА-Я]+(([' -][a-zA-Z0-9а-яА-Я ])?[a-zA-Z0-9а-яА-Я]*)*$\"\n                  placeholder=\"Name\"\n                />\n                <FiUser />\n                <ErrorMessage name=\"name\" />\n                {touched.name && !errors.name && isSubmit && <ValidMessage />}\n              </label>\n              <label htmlFor=\"email\">\n                <Field type=\"email\" name=\"email\" placeholder=\"Email\" required />\n                <HiOutlineMail />\n                <ErrorMessage name=\"email\" />\n                {touched.email && !errors.email && isSubmit && <ValidMessage />}\n              </label>\n              <label htmlFor=\"password\">\n                <Field\n                  type=\"password\"\n                  name=\"password\"\n                  placeholder=\"Password\"\n                  required\n                />\n                <FiLock />\n                <ErrorMessage name=\"password\" />\n                {touched.password && !errors.password && isSubmit && (\n                  <ValidMessage>Password is secure</ValidMessage>\n                )}\n              </label>\n            </div>\n\n            <button type=\"submit\" onClick={() => setIsSubmit(true)}>\n              Sign in\n            </button>\n          </Form>\n        )}\n      </Formik>\n\n      <Link to={'/auth'}>Registration</Link>\n    </div>\n  );\n};\n","import { SigninForm } from 'components/SigninPageComponents/SigninForm';\n\nconst Signin = () => {\n  return (\n    <section>\n      <div>\n        <SigninForm />\n      </div>\n    </section>\n  );\n};\n\nexport default Signin;\n"],"names":["errorMessage","msg","_jsx","className","children","ValidMessage","_ref","signinSchema","Yup","shape","name","min","max","matches","message","excludeEmptyString","required","email","password","initialValue","SigninForm","_useState","useState","_useState2","_slicedToArray","isSubmit","setIsSubmit","dispatch","useDispatch","_jsxs","Formik","initialValues","validationSchema","onSubmit","value","resetForm","operations","validateOnChange","validateOnBlur","_ref2","errors","touched","Form","noValidate","htmlFor","Field","type","title","pattern","placeholder","FiUser","ErrorMessage","HiOutlineMail","FiLock","onClick","Link","to"],"sourceRoot":""}